{"version":3,"file":"01-timer.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst input = document.querySelector('#datetime-picker');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet countdownInterval = null;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        message: '❌ Please choose a date in the future',\n        position: 'topRight',\n      });\n      startBtn.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nstartBtn.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startBtn.disabled = true;\n  input.disabled = true;\n\n  countdownInterval = setInterval(() => {\n    const now = new Date();\n    const diff = userSelectedDate - now;\n\n    if (diff <= 0) {\n      clearInterval(countdownInterval);\n      updateUI(0, 0, 0, 0);\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(diff);\n    updateUI(days, hours, minutes, seconds);\n  }, 1000);\n});\n\nfunction updateUI(d, h, m, s) {\n  daysSpan.textContent = addLeadingZero(d);\n  hoursSpan.textContent = addLeadingZero(h);\n  minutesSpan.textContent = addLeadingZero(m);\n  secondsSpan.textContent = addLeadingZero(s);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["startBtn","input","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","countdownInterval","options","selectedDates","selectedDate","iziToast","flatpickr","diff","updateUI","days","hours","minutes","seconds","convertMs","d","h","m","s","addLeadingZero","value","ms"],"mappings":"6vBAKA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAmB,KACnBC,EAAoB,KAExBP,EAAS,SAAW,GAEpB,MAAMQ,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CACb,QAAS,uCACT,SAAU,UAClB,CAAO,EACDX,EAAS,SAAW,KAEpBM,EAAmBI,EACnBV,EAAS,SAAW,GAEvB,CACH,EAEAY,EAAU,mBAAoBJ,CAAO,EAErCR,EAAS,iBAAiB,QAAS,IAAM,CAClCM,IAELN,EAAS,SAAW,GACpBC,EAAM,SAAW,GAEjBM,EAAoB,YAAY,IAAM,CAEpC,MAAMM,EAAOP,EADD,IAAI,KAGhB,GAAIO,GAAQ,EAAG,CACb,cAAcN,CAAiB,EAC/BO,EAAS,EAAG,EAAG,EAAG,CAAC,EACnB,MACD,CAED,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAI,EACxDC,EAASC,EAAMC,EAAOC,EAASC,CAAO,CACvC,EAAE,GAAI,EACT,CAAC,EAED,SAASJ,EAASM,EAAGC,EAAGC,EAAGC,EAAG,CAC5BrB,EAAS,YAAcsB,EAAeJ,CAAC,EACvCjB,EAAU,YAAcqB,EAAeH,CAAC,EACxCjB,EAAY,YAAcoB,EAAeF,CAAC,EAC1CjB,EAAY,YAAcmB,EAAeD,CAAC,CAC5C,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASN,EAAUO,EAAI,CAMrB,MAAMX,EAAO,KAAK,MAAMW,EAAK,KAAG,EAC1BV,EAAQ,KAAK,MAAOU,EAAK,MAAO,IAAI,EACpCT,EAAU,KAAK,MAAQS,EAAK,MAAO,KAAQ,GAAM,EACjDR,EAAU,KAAK,MAASQ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAX,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}